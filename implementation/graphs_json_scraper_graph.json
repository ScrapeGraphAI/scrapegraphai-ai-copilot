[
    {
        "prompt": "how is json_scraper_graph implemented in Scrapegraphai?",
        "answer": "\"\"\"\nJSONScraperGraph Module\n\"\"\"\n\nfrom typing import Optional\nfrom pydantic import BaseModel\n\nfrom .base_graph import BaseGraph\nfrom .abstract_graph import AbstractGraph\n\nfrom ..nodes import (\n    FetchNode,\n    GenerateAnswerNode\n)\n\n\nclass JSONScraperGraph(AbstractGraph):\n    \"\"\"\n    JSONScraperGraph defines a scraping pipeline for JSON files.\n\n    Attributes:\n        prompt (str): The prompt for the graph.\n        source (str): The source of the graph.\n        config (dict): Configuration parameters for the graph.\n        schema (BaseModel): The schema for the graph output.\n        llm_model: An instance of a language model client, configured for generating answers.\n        embedder_model: An instance of an embedding model client, \n        configured for generating embeddings.\n        verbose (bool): A flag indicating whether to show print statements during execution.\n        headless (bool): A flag indicating whether to run the graph in headless mode.\n\n    Args:\n        prompt (str): The prompt for the graph.\n        source (str): The source of the graph.\n        config (dict): Configuration parameters for the graph.\n        schema (BaseModel): The schema for the graph output.\n\n    Example:\n        >>> json_scraper = JSONScraperGraph(\n        ...     \"List me all the attractions in Chioggia.\",\n        ...     \"data/chioggia.json\",\n        ...     {\"llm\": {\"model\": \"gpt-3.5-turbo\"}}\n        ... )\n        >>> result = json_scraper.run()\n    \"\"\"\n\n    def __init__(self, prompt: str, source: str, config: dict, schema: Optional[BaseModel] = None):\n        super().__init__(prompt, config, source, schema)\n\n        self.input_key = \"json\" if source.endswith(\"json\") else \"json_dir\"\n\n    def _create_graph(self) -> BaseGraph:\n        \"\"\"\n        Creates the graph of nodes representing the workflow for web scraping.\n\n        Returns:\n            BaseGraph: A graph instance representing the web scraping workflow.\n        \"\"\"\n\n        fetch_node = FetchNode(\n            input=\"json | json_dir\",\n            output=[\"doc\", \"link_urls\", \"img_urls\"],\n        )\n     \n        generate_answer_node = GenerateAnswerNode(\n            input=\"user_prompt & (relevant_chunks | parsed_doc | doc)\",\n            output=[\"answer\"],\n            node_config={\n                \"llm_model\": self.llm_model,\n                \"additional_info\": self.config.get(\"additional_info\"),\n                \"schema\": self.schema\n            }\n        )\n\n        return BaseGraph(\n            nodes=[\n                fetch_node,\n                generate_answer_node,\n            ],\n            edges=[\n                (fetch_node, generate_answer_node)\n            ],\n            entry_point=fetch_node,\n            graph_name=self.__class__.__name__\n        )\n\n    def run(self) -> str:\n        \"\"\"\n        Executes the web scraping process and returns the answer to the prompt.\n\n        Returns:\n            str: The answer to the prompt.\n        \"\"\"\n\n        inputs = {\"user_prompt\": self.prompt, self.input_key: self.source}\n        self.final_state, self.execution_info = self.graph.execute(inputs)\n\n        return self.final_state.get(\"answer\", \"No answer found.\")\n"
    }
]