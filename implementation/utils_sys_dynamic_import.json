[
    {
        "prompt": "how is sys_dynamic_import implemented in Scrapegraphai?",
        "answer": "\"\"\"high-level module for dynamic importing of python modules at runtime\n\nsource code inspired by https://gist.github.com/DiTo97/46f4b733396b8d7a8f1d4d22db902cfc\n\"\"\"\n\nimport sys\nimport typing\nimport importlib.util  # noqa: F401\n\nif typing.TYPE_CHECKING:\n    import types\n\n\ndef srcfile_import(modpath: str, modname: str) -> \"types.ModuleType\":\n    \"\"\"imports a python module from its srcfile\n\n    Args:\n        modpath: The srcfile absolute path\n        modname: The module name in the scope\n\n    Returns:\n        The imported module\n\n    Raises:\n        ImportError: If the module cannot be imported from the srcfile\n    \"\"\"\n    spec = importlib.util.spec_from_file_location(modname, modpath)\n\n    if spec is None:\n        message = f\"missing spec for module at {modpath}\"\n        raise ImportError(message)\n\n    if spec.loader is None:\n        message = f\"missing spec loader for module at {modpath}\"\n        raise ImportError(message)\n\n    module = importlib.util.module_from_spec(spec)\n\n    # adds the module to the global scope\n    sys.modules[modname] = module\n\n    spec.loader.exec_module(module)\n\n    return module\n\n\ndef dynamic_import(modname: str, message: str = \"\") -> None:\n    \"\"\"imports a python module at runtime\n\n    Args:\n        modname: The module name in the scope\n        message: The display message in case of error\n\n    Raises:\n        ImportError: If the module cannot be imported at runtime\n    \"\"\"\n    if modname not in sys.modules:\n        try:\n            import importlib  # noqa: F401\n\n            module = importlib.import_module(modname)\n            sys.modules[modname] = module\n        except ImportError as x:\n            raise ImportError(message) from x\n"
    }
]