[
    {
        "prompt": "how is parse_node implemented in Scrapegraphai?",
        "answer": "\"\"\"\nParseNode Module\n\"\"\"\n\nfrom typing import List, Optional\nfrom semchunk import chunk\nfrom langchain_community.document_transformers import Html2TextTransformer\nfrom langchain_core.documents import Document\nfrom ..utils.logging import get_logger\nfrom .base_node import BaseNode\n\n\nclass ParseNode(BaseNode):\n    \"\"\"\n    A node responsible for parsing HTML content from a document.\n    The parsed content is split into chunks for further processing.\n\n    This node enhances the scraping workflow by allowing for targeted extraction of\n    content, thereby optimizing the processing of large HTML documents.\n\n    Attributes:\n        verbose (bool): A flag indicating whether to show print statements during execution.\n\n    Args:\n        input (str): Boolean expression defining the input keys needed from the state.\n        output (List[str]): List of output keys to be updated in the state.\n        node_config (dict): Additional configuration for the node.\n        node_name (str): The unique identifier name for the node, defaulting to \"Parse\".\n    \"\"\"\n\n    def __init__(\n        self,\n        input: str,\n        output: List[str],\n        node_config: Optional[dict] = None,\n        node_name: str = \"Parse\",\n    ):\n        super().__init__(node_name, \"node\", input, output, 1, node_config)\n\n        self.verbose = (\n            False if node_config is None else node_config.get(\"verbose\", False)\n        )\n        self.parse_html = (\n            True if node_config is None else node_config.get(\"parse_html\", True)\n        )\n\n    def execute(self, state: dict) -> dict:\n        \"\"\"\n        Executes the node's logic to parse the HTML document content and split it into chunks.\n\n        Args:\n            state (dict): The current state of the graph. The input keys will be used to fetch the\n                            correct data from the state.\n\n        Returns:\n            dict: The updated state with the output key containing the parsed content chunks.\n\n        Raises:\n            KeyError: If the input keys are not found in the state, indicating that the\n                        necessary information for parsing the content is missing.\n        \"\"\"\n\n        self.logger.info(f\"--- Executing {self.node_name} Node ---\")\n\n        # Interpret input keys based on the provided input expression\n        input_keys = self.get_input_keys(state)\n\n        # Fetching data from the state based on the input keys\n        input_data = [state[key] for key in input_keys]\n        # Parse the document\n        docs_transformed = input_data[0]\n        if self.parse_html:\n            docs_transformed = Html2TextTransformer().transform_documents(input_data[0])\n            docs_transformed = docs_transformed[0]\n\n            chunks = chunk(text=docs_transformed.page_content,\n                            chunk_size= self.node_config.get(\"chunk_size\", 4096)-250,\n                            token_counter= lambda x: len(x),\n                            memoize=False)\n        else:\n            docs_transformed = docs_transformed[0]\n\n            if isinstance(docs_transformed, Document):\n                chunks = chunk(text=docs_transformed.page_content,\n                            chunk_size= self.node_config.get(\"chunk_size\", 4096)-250,\n                            token_counter= lambda x: len(x),\n                            memoize=False)\n            else:\n\n                chunks = chunk(text=docs_transformed,\n                                chunk_size= self.node_config.get(\"chunk_size\", 4096)-250,\n                                token_counter= lambda x: len(x),\n                                memoize=False)\n    \n        state.update({self.output[0]: chunks})\n\n        return state\n"
    }
]