[
    {
        "prompt": "how is chromium implemented in Scrapegraphai?",
        "answer": "\"\"\"\nChromium module\n\"\"\"\nimport asyncio\nfrom typing import Any, AsyncIterator, Iterator, List, Optional\n\nfrom langchain_community.document_loaders.base import BaseLoader\nfrom langchain_core.documents import Document\n\nfrom ..utils import Proxy, dynamic_import, get_logger, parse_or_search_proxy\n\n\nlogger = get_logger(\"web-loader\")\n\n\nclass ChromiumLoader(BaseLoader):\n    \"\"\"scrapes HTML pages from URLs using a (headless) instance of the\n    Chromium web driver with proxy protection\n\n    Attributes:\n        backend: The web driver backend library; defaults to 'playwright'.\n        browser_config: A dictionary containing additional browser kwargs.\n        headless: whether to run browser in headless mode.\n        proxy: A dictionary containing proxy settings; None disables protection.\n        urls: A list of URLs to scrape content from.\n    \"\"\"\n\n    def __init__(\n        self,\n        urls: List[str],\n        *,\n        backend: str = \"playwright\",\n        headless: bool = True,\n        proxy: Optional[Proxy] = None,\n        load_state: str = \"domcontentloaded\",\n        **kwargs: Any,\n    ):\n        \"\"\"Initialize the loader with a list of URL paths.\n\n        Args:\n            backend: The web driver backend library; defaults to 'playwright'.\n            headless: whether to run browser in headless mode.\n            proxy: A dictionary containing proxy information; None disables protection.\n            urls: A list of URLs to scrape content from.\n            kwargs: A dictionary containing additional browser kwargs.\n\n        Raises:\n            ImportError: If the required backend package is not installed.\n        \"\"\"\n        message = (\n            f\"{backend} is required for ChromiumLoader. \"\n            f\"Please install it with `pip install {backend}`.\"\n        )\n\n        dynamic_import(backend, message)\n\n        self.backend = backend\n        self.browser_config = kwargs\n        self.headless = headless\n        self.proxy = parse_or_search_proxy(proxy) if proxy else None\n        self.urls = urls\n        self.load_state = load_state\n\n    async def ascrape_playwright(self, url: str) -> str:\n        \"\"\"\n        Asynchronously scrape the content of a given URL using Playwright's async API.\n\n        Args:\n            url (str): The URL to scrape.\n\n        Returns:\n            str: The scraped HTML content or an error message if an exception occurs.\n\n        \"\"\"\n        from playwright.async_api import async_playwright\n        from undetected_playwright import Malenia\n\n        logger.info(\"Starting scraping...\")\n        results = \"\"\n        async with async_playwright() as p:\n            browser = await p.chromium.launch(\n                headless=self.headless, proxy=self.proxy, **self.browser_config\n            )\n            try:\n                context = await browser.new_context()\n                await Malenia.apply_stealth(context)\n                page = await context.new_page()\n                await page.goto(url, wait_until=\"domcontentloaded\")\n                await page.wait_for_load_state(self.load_state)\n                results = await page.content()  # Simply get the HTML content\n                logger.info(\"Content scraped\")\n            except Exception as e:\n                results = f\"Error: {e}\"\n            await browser.close()\n        return results\n\n    def lazy_load(self) -> Iterator[Document]:\n        \"\"\"\n        Lazily load text content from the provided URLs.\n\n        This method yields Documents one at a time as they're scraped,\n        instead of waiting to scrape all URLs before returning.\n\n        Yields:\n            Document: The scraped content encapsulated within a Document object.\n\n        \"\"\"\n        scraping_fn = getattr(self, f\"ascrape_{self.backend}\")\n\n        for url in self.urls:\n            html_content = asyncio.run(scraping_fn(url))\n            metadata = {\"source\": url}\n            yield Document(page_content=html_content, metadata=metadata)\n\n    async def alazy_load(self) -> AsyncIterator[Document]:\n        \"\"\"\n        Asynchronously load text content from the provided URLs.\n\n        This method leverages asyncio to initiate the scraping of all provided URLs\n        simultaneously. It improves performance by utilizing concurrent asynchronous\n        requests. Each Document is yielded as soon as its content is available,\n        encapsulating the scraped content.\n\n        Yields:\n            Document: A Document object containing the scraped content, along with its\n            source URL as metadata.\n        \"\"\"\n        scraping_fn = getattr(self, f\"ascrape_{self.backend}\")\n\n        tasks = [scraping_fn(url) for url in self.urls]\n        results = await asyncio.gather(*tasks)\n        for url, content in zip(self.urls, results):\n            metadata = {\"source\": url}\n            yield Document(page_content=content, metadata=metadata)\n"
    }
]