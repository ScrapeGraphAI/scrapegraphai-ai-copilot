[
    {
        "prompt": "how is cleanup_html implemented in Scrapegraphai?",
        "answer": "\"\"\" \nModule for minimizing the code\n\"\"\"\nfrom bs4 import BeautifulSoup\nfrom minify_html import minify\nfrom urllib.parse import urljoin\n\ndef cleanup_html(html_content: str, base_url: str) -> str:\n    \"\"\"\n    Processes HTML content by removing unnecessary tags, minifying the HTML, and extracting the title and body content.\n\n    Args:\n        html_content (str): The HTML content to be processed.\n\n    Returns:\n        str: A string combining the parsed title and the minified body content. If no body content is found, it indicates so.\n\n    Example:\n        >>> html_content = \"<html><head><title>Example</title></head><body><p>Hello World!</p></body></html>\"\n        >>> remover(html_content)\n        'Title: Example, Body: <body><p>Hello World!</p></body>'\n\n    This function is particularly useful for preparing HTML content for environments where bandwidth usage needs to be minimized.\n    \"\"\"\n\n    soup = BeautifulSoup(html_content, 'html.parser')\n\n    # Title Extraction\n    title_tag = soup.find('title')\n    title = title_tag.get_text() if title_tag else \"\"\n\n    # Script and Style Tag Removal\n    for tag in soup.find_all(['script', 'style']):\n        tag.extract()\n\n    # Links extraction\n    link_urls = [urljoin(base_url, link['href']) for link in soup.find_all('a', href=True)]\n\n    # Images extraction\n    images = soup.find_all('img')\n    image_urls = []\n    for image in images:\n        if 'src' in image.attrs:\n            # if http or https is not present in the image url, join it with the base url\n            if 'http' not in image['src']:\n                image_urls.append(urljoin(base_url, image['src']))\n            else:\n                image_urls.append(image['src'])\n\n    # Body Extraction (if it exists)\n    body_content = soup.find('body')\n    if body_content:\n        # Minify the HTML within the body tag\n        minimized_body = minify(str(body_content))\n        return title, minimized_body, link_urls, image_urls\n\n    else:\n        raise ValueError(f\"No HTML body content found, please try setting the 'headless' flag to False in the graph configuration. HTML content: {html_content}\")\n"
    }
]