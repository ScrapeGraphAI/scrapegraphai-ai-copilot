[
    {
        "prompt": "how is logging implemented in Scrapegraphai?",
        "answer": "\"\"\"A centralized logging system for any library\n\nsource code inspired by https://gist.github.com/DiTo97/9a0377f24236b66134eb96da1ec1693f\n\"\"\"\n\nimport logging\nimport os\nimport sys\nimport threading\nfrom functools import lru_cache\nfrom typing import Optional\n\n_library_name = __name__.split(\".\", maxsplit=1)[0]\n\nDEFAULT_HANDLER = None\n_default_logging_level = logging.WARNING\n\n_semaphore = threading.Lock()\n\n\ndef _get_library_root_logger() -> logging.Logger:\n    return logging.getLogger(_library_name)\n\n\ndef _set_library_root_logger() -> None:\n    global DEFAULT_HANDLER\n\n    with _semaphore:\n        if DEFAULT_HANDLER:\n            return\n\n        DEFAULT_HANDLER = logging.StreamHandler()  # sys.stderr as stream\n\n        # https://github.com/pyinstaller/pyinstaller/issues/7334#issuecomment-1357447176\n        if sys.stderr is None:\n            sys.stderr = open(os.devnull, \"w\", encoding=\"utf-8\")\n\n        DEFAULT_HANDLER.flush = sys.stderr.flush\n\n        library_root_logger = _get_library_root_logger()\n        library_root_logger.addHandler(DEFAULT_HANDLER)\n        library_root_logger.setLevel(_default_logging_level)\n        library_root_logger.propagate = False\n\n\ndef get_logger(name: Optional[str] = None) -> logging.Logger:\n    _set_library_root_logger()\n    return logging.getLogger(name or _library_name)\n\n\ndef get_verbosity() -> int:\n    _set_library_root_logger()\n    return _get_library_root_logger().getEffectiveLevel()\n\n\ndef set_verbosity(verbosity: int) -> None:\n    _set_library_root_logger()\n    _get_library_root_logger().setLevel(verbosity)\n\n\ndef set_verbosity_debug() -> None:\n    set_verbosity(logging.DEBUG)\n\n\ndef set_verbosity_info() -> None:\n    set_verbosity(logging.INFO)\n\n\ndef set_verbosity_warning() -> None:\n    set_verbosity(logging.WARNING)\n\n\ndef set_verbosity_error() -> None:\n    set_verbosity(logging.ERROR)\n\n\ndef set_verbosity_fatal() -> None:\n    set_verbosity(logging.FATAL)\n\n\ndef set_handler(handler: logging.Handler) -> None:\n    _set_library_root_logger()\n\n    assert handler is not None\n\n    _get_library_root_logger().addHandler(handler)\n\n\ndef setDEFAULT_HANDLER() -> None:\n    set_handler(DEFAULT_HANDLER)\n\n\ndef unset_handler(handler: logging.Handler) -> None:\n    _set_library_root_logger()\n\n    assert handler is not None\n\n    _get_library_root_logger().removeHandler(handler)\n\n\ndef unsetDEFAULT_HANDLER() -> None:\n    unset_handler(DEFAULT_HANDLER)\n\n\ndef set_propagation() -> None:\n    _get_library_root_logger().propagate = True\n\n\ndef unset_propagation() -> None:\n    _get_library_root_logger().propagate = False\n\n\ndef set_formatting() -> None:\n    \"\"\"sets formatting for all handlers bound to the root logger\n\n    ```\n        [levelname|filename|line number] time >> message\n    ```\n    \"\"\"\n    formatter = logging.Formatter(\n        \"[%(levelname)s|%(filename)s:%(lineno)s] %(asctime)s >> %(message)s\"\n    )\n\n    for handler in _get_library_root_logger().handlers:\n        handler.setFormatter(formatter)\n\n\ndef unset_formatting() -> None:\n    for handler in _get_library_root_logger().handlers:\n        handler.setFormatter(None)\n\n\n@lru_cache(None)\ndef warning_once(self, *args, **kwargs):\n    \"\"\"emits warning logs with the same message only once\"\"\"\n    self.warning(*args, **kwargs)\n\n\nlogging.Logger.warning_once = warning_once\n"
    }
]