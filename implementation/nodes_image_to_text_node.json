[
    {
        "prompt": "how is image_to_text_node implemented in Scrapegraphai?",
        "answer": "\"\"\"\nImageToTextNode Module\n\"\"\"\n\nfrom typing import List, Optional\nfrom ..utils.logging import get_logger\nfrom .base_node import BaseNode\n\n\nclass ImageToTextNode(BaseNode):\n    \"\"\"\n    Retrieve images from a list of URLs and return a description of \n    the images using an image-to-text model.\n\n    Attributes:\n        llm_model: An instance of the language model client used for image-to-text conversion.\n        verbose (bool): A flag indicating whether to show print statements during execution.\n\n    Args:\n        input (str): Boolean expression defining the input keys needed from the state.\n        output (List[str]): List of output keys to be updated in the state.\n        node_config (dict): Additional configuration for the node.\n        node_name (str): The unique identifier name for the node, defaulting to \"ImageToText\".\n    \"\"\"\n\n    def __init__(\n        self,\n        input: str,\n        output: List[str],\n        node_config: Optional[dict] = None,\n        node_name: str = \"ImageToText\",\n    ):\n        super().__init__(node_name, \"node\", input, output, 1, node_config)\n\n        self.llm_model = node_config[\"llm_model\"]\n        self.verbose = (\n            False if node_config is None else node_config.get(\"verbose\", False)\n        )\n        self.max_images = 5 if node_config is None else node_config.get(\"max_images\", 5)\n\n    def execute(self, state: dict) -> dict:\n        \"\"\"\n        Generate text from an image using an image-to-text model. The method retrieves the image\n        from the list of URLs provided in the state and returns the extracted text.\n\n        Args:\n            state (dict): The current state of the graph. The input keys will be used to fetch the\n                            correct data types from the state.\n\n        Returns:\n            dict: The updated state with the input key containing the text extracted from the image.\n        \"\"\"\n\n        self.logger.info(f\"--- Executing {self.node_name} Node ---\")\n\n        input_keys = self.get_input_keys(state)\n        input_data = [state[key] for key in input_keys]\n        urls = input_data[0]\n\n        if isinstance(urls, str):\n            urls = [urls]\n        elif len(urls) == 0:\n            return state\n\n        # Skip the image-to-text conversion\n        if self.max_images < 1:\n            return state\n\n        img_desc = []\n        for url in urls[: self.max_images]:\n            try:\n                text_answer = self.llm_model.run(url)\n            except Exception as e:\n                text_answer = f\"Error: incompatible image format or model failure.\"\n            img_desc.append(text_answer)\n\n        state.update({self.output[0]: img_desc})\n        return state\n"
    }
]