[
    {
        "prompt": "how is proxy_rotation implemented in Scrapegraphai?",
        "answer": "\"\"\"\nModule for rotating proxies\n\"\"\"\n\nimport ipaddress\nimport random\nimport re\nfrom typing import List, Optional, Set, TypedDict\nimport requests\nfrom fp.errors import FreeProxyException\nfrom fp.fp import FreeProxy\n\n\nclass ProxyBrokerCriteria(TypedDict, total=False):\n    \"\"\"proxy broker criteria\"\"\"\n\n    anonymous: bool\n    countryset: Set[str]\n    secure: bool\n    timeout: float\n    search_outside_if_empty: bool\n\n\nclass ProxySettings(TypedDict, total=False):\n    \"\"\"proxy settings\"\"\"\n\n    server: str\n    bypass: str\n    username: str\n    password: str\n\n\nclass Proxy(ProxySettings):\n    \"\"\"proxy server information\"\"\"\n\n    criteria: ProxyBrokerCriteria\n\n\ndef search_proxy_servers(\n    anonymous: bool = True,\n    countryset: Optional[Set[str]] = None,\n    secure: bool = False,\n    timeout: float = 5.0,\n    max_shape: int = 5,\n    search_outside_if_empty: bool = True,\n) -> List[str]:\n    \"\"\"search for proxy servers that match the specified broker criteria\n\n    Args:\n        anonymous: whether proxy servers should have minimum level-1 anonymity.\n        countryset: admissible proxy servers locations.\n        secure: whether proxy servers should support HTTP or HTTPS; defaults to HTTP;\n        timeout: The maximum timeout for proxy responses; defaults to 5.0 seconds.\n        max_shape: The maximum number of proxy servers to return; defaults to 5.\n        search_outside_if_empty: whether countryset should be extended if empty.\n\n    Returns:\n        A list of proxy server URLs matching the criteria.\n\n    Example:\n        >>> search_proxy_servers(\n        ...     anonymous=True,\n        ...     countryset={\"GB\", \"US\"},\n        ...     secure=True,\n        ...     timeout=1.0\n        ...     max_shape=2\n        ... )\n        [\n            \"http://103.10.63.135:8080\",\n            \"http://113.20.31.250:8080\",\n        ]\n    \"\"\"\n    proxybroker = FreeProxy(\n        anonym=anonymous,\n        country_id=countryset,\n        elite=True,\n        https=secure,\n        timeout=timeout,\n    )\n\n    def search_all(proxybroker: FreeProxy, k: int, search_outside: bool) -> List[str]:\n        candidateset = proxybroker.get_proxy_list(search_outside)\n        random.shuffle(candidateset)\n\n        positive = set()\n\n        for address in candidateset:\n            setting = {proxybroker.schema: f\"http://{address}\"}\n\n            try:\n                server = proxybroker._FreeProxy__check_if_proxy_is_working(setting)\n\n                if not server:\n                    continue\n\n                positive.add(server)\n\n                if len(positive) < k:\n                    continue\n\n                return list(positive)\n\n            except requests.exceptions.RequestException:\n                continue\n\n        n = len(positive)\n\n        if n < k and search_outside:\n            proxybroker.country_id = None\n\n            try:\n                negative = set(search_all(proxybroker, k - n, False))\n            except FreeProxyException:\n                negative = set()\n\n            positive = positive | negative\n\n        if not positive:\n            raise FreeProxyException(\"missing proxy servers for criteria\")\n\n        return list(positive)\n\n    return search_all(proxybroker, max_shape, search_outside_if_empty)\n\n\ndef _parse_proxy(proxy: ProxySettings) -> ProxySettings:\n    \"\"\"parses a proxy configuration with known server\n\n    Args:\n        proxy: The proxy configuration to parse.\n\n    Returns:\n        A 'playwright' compliant proxy configuration.\n    \"\"\"\n    assert \"server\" in proxy, \"missing server in the proxy configuration\"\n\n    auhtorization = [x in proxy for x in (\"username\", \"password\")]\n\n    message = \"username and password must be provided in pairs or not at all\"\n\n    assert all(auhtorization) or not any(auhtorization), message\n\n    parsed = {\"server\": proxy[\"server\"]}\n\n    if proxy.get(\"bypass\"):\n        parsed[\"bypass\"] = proxy[\"bypass\"]\n\n    if all(auhtorization):\n        parsed[\"username\"] = proxy[\"username\"]\n        parsed[\"password\"] = proxy[\"password\"]\n\n    return parsed\n\n\ndef _search_proxy(proxy: Proxy) -> ProxySettings:\n    \"\"\"searches for a proxy server matching the specified broker criteria\n\n    Args:\n        proxy: The proxy configuration to search for.\n\n    Returns:\n        A 'playwright' compliant proxy configuration.\n    \"\"\"\n\n\n    # remove max_shape from criteria \n    criteria = proxy.get(\"criteria\", {}).copy()\n    criteria.pop(\"max_shape\", None)\n\n    server = search_proxy_servers(max_shape=1, **criteria)[0]\n\n    return {\"server\": server}\n\n\ndef is_ipv4_address(address: str) -> bool:\n    \"\"\"If a proxy address conforms to a IPv4 address\"\"\"\n    try:\n        ipaddress.IPv4Address(address)\n        return True\n    except ipaddress.AddressValueError:\n        return False\n\n\ndef parse_or_search_proxy(proxy: Proxy) -> ProxySettings:\n    \"\"\"parses a proxy configuration or searches for a new one matching\n    the specified broker criteria\n\n    Args:\n        proxy: The proxy configuration to parse or search for.\n\n    Returns:\n        A 'playwright' compliant proxy configuration.\n\n    Notes:\n        - If the proxy server is a IP address, it is assumed to be\n        a proxy server address.\n        - If the proxy server is 'broker', a proxy server is searched for\n        based on the provided broker criteria.\n\n    Example:\n        >>> proxy = {\n        ...     \"server\": \"broker\",\n        ...     \"criteria\": {\n        ...         \"anonymous\": True,\n        ...         \"countryset\": {\"GB\", \"US\"},\n        ...         \"secure\": True,\n        ...         \"timeout\": 5.0\n        ...         \"search_outside_if_empty\": False\n        ...     }\n        ... }\n\n        >>> parse_or_search_proxy(proxy)\n        {\n            \"server\": \"<proxy-server-matching-criteria>\",\n        }\n\n    Example:\n        >>> proxy = {\n        ...     \"server\": \"192.168.1.1:8080\",\n        ...     \"username\": \"<username>\",\n        ...     \"password\": \"<password>\"\n        ... }\n\n        >>> parse_or_search_proxy(proxy)\n        {\n            \"server\": \"192.168.1.1:8080\",\n            \"username\": \"<username>\",\n            \"password\": \"<password>\"\n        }\n    \"\"\"\n    assert \"server\" in proxy, \"missing server in the proxy configuration\"\n\n    server_address = re.sub(r'^\\w+://', '', proxy[\"server\"]).split(\":\", maxsplit=1)[0]\n\n    if is_ipv4_address(server_address):\n        return _parse_proxy(proxy)\n\n    assert proxy[\"server\"] == \"broker\", \"unknown proxy server\"\n\n    return _search_proxy(proxy)\n"
    }
]