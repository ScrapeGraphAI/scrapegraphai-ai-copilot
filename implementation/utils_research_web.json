[
    {
        "prompt": "how is research_web implemented in Scrapegraphai?",
        "answer": "\"\"\"\nResearch_web module\n\"\"\"\nimport re\nfrom typing import List\nfrom langchain_community.tools import DuckDuckGoSearchResults\nfrom googlesearch import search as google_search\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef search_on_web(query: str, search_engine: str = \"Google\", \n                  max_results: int = 10, port: int = 8080) -> List[str]:\n    \"\"\"\n    Searches the web for a given query using specified search engine options.\n\n    Args:\n        query (str): The search query to find on the internet.\n        search_engine (str, optional): Specifies the search engine to use, \n        options include 'Google', 'DuckDuckGo', 'Bing', or 'SearXNG'. Default is 'Google'.\n        max_results (int, optional): The maximum number of search results to return.\n        port (int, optional): The port number to use when searching with 'SearXNG'. Default is 8080.\n\n    Returns:\n        List[str]: A list of URLs as strings that are the search results.\n\n    Raises:\n        ValueError: If the search engine specified is not supported.\n\n    Example:\n        >>> search_on_web(\"example query\", search_engine=\"Google\", max_results=5)\n        ['http://example.com', 'http://example.org', ...]\n    \"\"\"\n\n    if search_engine.lower() == \"google\":\n        res = []\n        for url in google_search(query, stop=max_results):\n            res.append(url)\n        return res\n\n    elif search_engine.lower() == \"duckduckgo\":\n        research = DuckDuckGoSearchResults(max_results=max_results)\n        res = research.run(query)\n        links = re.findall(r'https?://[^\\s,\\]]+', res)\n        return links\n\n    elif search_engine.lower() == \"bing\":\n        headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n        }\n        search_url = f\"https://www.bing.com/search?q={query}\"\n        response = requests.get(search_url, headers=headers)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, \"html.parser\")\n\n        search_results = []\n        for result in soup.find_all('li', class_='b_algo', limit=max_results):\n            link = result.find('a')['href']\n            search_results.append(link)\n        return search_results\n\n    elif search_engine.lower() == \"searxng\":\n        url = f\"http://localhost:{port}\"\n        params = {\"q\": query, \"format\": \"json\"}\n\n        # Send the GET request to the server\n        response = requests.get(url, params=params)\n\n        # Parse the response and limit to the specified max_results\n        data = response.json()\n        limited_results = data[\"results\"][:max_results]\n        return limited_results\n\n    else:\n        raise ValueError(\"The only search engines available are DuckDuckGo, Google, Bing, or SearXNG\")\n"
    }
]